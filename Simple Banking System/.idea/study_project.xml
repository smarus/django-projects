<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="Everything goes digital these days, and so does money. Today, most people have credit cards, which save us time, energy and nerves. From not having to carry a wallet full of cash to consumer protection, cards make our lives easier in many ways. In this project, you will develop a simple banking system with database.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/109&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="name" value="Simple Banking System" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="591" />
                <option name="stepId" value="9827" />
                <option name="title" value="Card anatomy" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="592" />
                <option name="stepId" value="9828" />
                <option name="title" value="Luhn algorithm" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="593" />
                <option name="stepId" value="9829" />
                <option name="title" value="I'm so lite" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="594" />
                <option name="stepId" value="9830" />
                <option name="title" value="Advanced system" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="333" />
                      <option name="theoryId" value="5204" />
                      <option name="title" value="Introduction to Python" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="336" />
                      <option name="theoryId" value="5208" />
                      <option name="title" value="Overview of the basic program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="335" />
                      <option name="theoryId" value="5233" />
                      <option name="title" value="Multi-line programs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="402" />
                      <option name="theoryId" value="5879" />
                      <option name="title" value="PEP 8" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="403" />
                      <option name="theoryId" value="6081" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="394" />
                      <option name="theoryId" value="5852" />
                      <option name="title" value="Basic data types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="393" />
                      <option name="theoryId" value="5814" />
                      <option name="title" value="Quotes and multi-line strings" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="396" />
                      <option name="theoryId" value="5859" />
                      <option name="title" value="Variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="398" />
                      <option name="theoryId" value="5865" />
                      <option name="title" value="Integer arithmetic" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="415" />
                      <option name="theoryId" value="6025" />
                      <option name="title" value="Boolean logic" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="440" />
                      <option name="theoryId" value="6224" />
                      <option name="title" value="Type casting" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="397" />
                      <option name="theoryId" value="5885" />
                      <option name="title" value="Naming variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="395" />
                      <option name="theoryId" value="5979" />
                      <option name="title" value="List" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="475" />
                      <option name="theoryId" value="6481" />
                      <option name="title" value="Dictionary" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="400" />
                      <option name="theoryId" value="5891" />
                      <option name="title" value="Invoking a function" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="401" />
                      <option name="theoryId" value="5900" />
                      <option name="title" value="Declaring a function" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="455" />
                      <option name="theoryId" value="6322" />
                      <option name="title" value="Scopes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="404" />
                      <option name="theoryId" value="5913" />
                      <option name="title" value="Taking input" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="399" />
                      <option name="theoryId" value="5872" />
                      <option name="title" value="Program with numbers" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="512" />
                      <option name="theoryId" value="6989" />
                      <option name="title" value="Files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="670" />
                      <option name="theoryId" value="8497" />
                      <option name="title" value="Introduction to databases" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="519" />
                      <option name="theoryId" value="7054" />
                      <option name="title" value="What is SQL" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="528" />
                      <option name="theoryId" value="7123" />
                      <option name="title" value="Basic data types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="557" />
                      <option name="theoryId" value="7400" />
                      <option name="title" value="Literals" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="558" />
                      <option name="theoryId" value="7409" />
                      <option name="title" value="Expressions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="559" />
                      <option name="theoryId" value="7392" />
                      <option name="title" value="Basic SELECT statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="606" />
                      <option name="theoryId" value="7907" />
                      <option name="title" value="The NULL value" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="692" />
                      <option name="theoryId" value="8611" />
                      <option name="title" value="SELECT FROM statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="693" />
                      <option name="theoryId" value="8619" />
                      <option name="title" value="SELECT FROM WHERE statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="765" />
                      <option name="theoryId" value="9059" />
                      <option name="title" value="Basic INSERT statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="768" />
                      <option name="theoryId" value="9084" />
                      <option name="title" value="Basic CREATE statement" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="767" />
                      <option name="theoryId" value="9075" />
                      <option name="title" value="Basic DELETE statement" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="Everything goes digital these days, and so does money. Today, most people have credit cards, which save us time, energy and nerves. From not having to carry a wallet full of cash to consumer protection, cards make our lives easier in many ways. In this project, you will develop a simple banking system with database." />
              <option name="id" value="109" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/361994/additional_files.json" />
              <option name="language" value="python" />
              <option name="templateBased" value="false" />
              <option name="title" value="Simple Banking System" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="3" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Simple Banking System" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;We live busy lives these days. Between work, chores, and other things in our to-do lists, it can be tough to catch your breath and stay calm. Credit cards are one of the things that save us time, energy, and nerves. From not having to carry a wallet full of cash to consumer protection, cards make our lives easier in many ways. In this project, you will develop a simple banking system with a database.&lt;/p&gt;&#10;&#10;&lt;p&gt;If you’re curious about business, technology, or how things around you work, you'll probably enjoy learning how credit card numbers work. These numbers ensure easy payments, and they also help prevent payment errors and fraud. Card numbers are evolving, and they might look different in the near future.&lt;/p&gt;&#10;&#10;&lt;p&gt;Let's take a look at the anatomy of a credit card:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;409&quot; src=&quot;https://lh3.googleusercontent.com/ZgkQv6hMeNkbBrSeSsnb2t6GLkawQFKJNaXapTAaFmy-WPWPPtFp5MpnvlzSFzn3R-0zAvOEUriCg6bGeX_stXdG8L0WSeASnwvqFLLFyeQO4JcbfH4yjh2QdHBEdQyZy2k72q4V&quot; width=&quot;602&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;The very first number is the &lt;strong&gt;Major Industry Identifier (MII),&lt;/strong&gt; which tells you what sort of institution issued the card.&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;1 and 2 are issued by airlines&lt;/li&gt;&#10;&#9;&lt;li&gt;3 is issued by travel and entertainment&lt;/li&gt;&#10;&#9;&lt;li&gt;4 and 5 are issued by banking and financial institutions&lt;/li&gt;&#10;&#9;&lt;li&gt;6 is issued by merchandising and banking&lt;/li&gt;&#10;&#9;&lt;li&gt;7 is issued by petroleum companies&lt;/li&gt;&#10;&#9;&lt;li&gt;8 is issued by telecommunications companies&lt;/li&gt;&#10;&#9;&lt;li&gt;9 is issued by national assignment&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;In our banking system, credit cards should begin with 4.&lt;/p&gt;&#10;&#10;&lt;p&gt;The first six digits are the &lt;strong&gt;Issuer Identification Number (IIN)&lt;/strong&gt;. These can be used to look up where the card originated from. If you have access to a list that provides detail on who owns each IIN, you can see who issued the card just by reading the card number.&lt;/p&gt;&#10;&#10;&lt;p&gt;Here are a few you might recognize:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;Visa: 4*****&lt;/li&gt;&#10;&#9;&lt;li&gt;American Express (AMEX): 34**** or 37****&lt;/li&gt;&#10;&#9;&lt;li&gt;Mastercard: 51**** to 55****&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;In our banking system, the IIN must be 400000.&lt;/p&gt;&#10;&#10;&lt;p&gt;The seventh digit to the second-to-last digit is the &lt;strong&gt;customer account number&lt;/strong&gt;. Most companies use just 9 digits for the account numbers, but it’s possible to use up to 12. This means that using the current algorithm for credit cards, the world can issue about a trillion cards before it has to change the system.&lt;/p&gt;&#10;&#10;&lt;p&gt;We often see 16-digit credit card numbers today, but it’s possible to issue a card with up to 19 digits using the current system. In the future, we may see longer numbers becoming more common.&lt;/p&gt;&#10;&#10;&lt;p&gt;In our banking system, the customer account number&lt;strong&gt; &lt;/strong&gt;can be any number, but it should be unique and have a length of 16 digits.&lt;/p&gt;&#10;&#10;&lt;p&gt;The very last digit of a credit card is the&lt;strong&gt; check digit&lt;/strong&gt; or &lt;strong&gt;checksum&lt;/strong&gt;. It is used to validate the credit card number using the Luhn algorithm, which we will explain in the next stage of this project. For now, the checksum can be any digit you like.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Instruction&lt;/h2&gt;&#10;&#10;&lt;p&gt;You should allow customers to create a new account in our banking system.&lt;/p&gt;&#10;&#10;&lt;p&gt;Once the program starts, you should print the menu: &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. Create an account&#10;2. Log into account&#10;0. Exit&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;If the customer chooses ‘Create an account’, you should generate a new card number which satisfies all the conditions described above. Then you should generate a PIN code that belongs to the generated card number. A PIN code is a sequence of any 4 digits. PIN should be generated in a range from 0000 to 9999.&lt;/p&gt;&#10;&#10;&lt;p&gt;If the customer chooses ‘Log into account’, you should ask them to enter their card information. Your program should store all generated data until it is terminated so that a user is able to log into any of the created accounts by a card number and its pin. You can use an array to store the information.&lt;/p&gt;&#10;&#10;&lt;p&gt;After all information is entered correctly, you should allow the user to check the account balance; right after creating the account, the balance should be 0. It should also be possible to log out of the account and exit the program.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;The symbol &lt;code class=&quot;java&quot;&gt;&amp;gt;&lt;/code&gt; represents the user input. Notice that it's not a part of the input.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Your card has been created&#10;Your card number:&#10;4000004938320895&#10;Your card PIN:&#10;6826&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;2&#10;&#10;Enter your card number:&#10;&amp;gt;4000004938320895&#10;Enter your PIN:&#10;&amp;gt;4444&#10;&#10;Wrong card number or PIN!&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;2&#10;&#10;Enter your card number:&#10;&amp;gt;4000004938320895&#10;Enter your PIN:&#10;&amp;gt;6826&#10;&#10;You have successfully logged in!&#10;&#10;1. Balance&#10;2. Log out&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Balance: 0&#10;&#10;1. Balance&#10;2. Log out&#10;0. Exit&#10;&amp;gt;2&#10;&#10;You have successfully logged out!&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;0&#10;&#10;Bye!&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/109/stages/591/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9827" />
                      <option name="index" value="1" />
                      <option name="name" value="Card anatomy" />
                      <option name="record" value="1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.test_case import CheckResult&#10;from hstest.stage_test import StageTest&#10;from hstest.test_case import TestCase&#10;from hstest.exceptions import WrongAnswerException&#10;import random&#10;import re&#10;&#10;card_number = ''&#10;pin = ''&#10;are_all_inputs_read = False&#10;&#10;&#10;def get_credentials(output: str):&#10;    number = re.findall(r'400000\d{10}', output, re.MULTILINE)&#10;    if not number:&#10;        raise WrongAnswerException('You are printing the card number incorrectly. '&#10;                                   'The card number should look like in the example: 400000DDDDDDDDDD,'&#10;                                   ' where D is a digit.\nMake sure the card number is 16-digit length and '&#10;                                   'you don\'t print any extra spaces at the end of the line!')&#10;&#10;    PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)&#10;    if not PIN:&#10;        raise WrongAnswerException('You are printing the card PIN incorrectly. '&#10;                                   'The PIN should look like in the example: DDDD, where D is a digit.\n'&#10;                                   'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'&#10;                                   ' end of the line!')&#10;&#10;    return number[0], PIN[0]&#10;&#10;&#10;def test_card_generation(output: str, value_to_return):&#10;    global card_number, pin, are_all_inputs_read&#10;    are_all_inputs_read = False&#10;    credentials = get_credentials(output)&#10;    card_number = credentials[0]&#10;    pin = credentials[1]&#10;    return value_to_return&#10;&#10;&#10;def test_difference_between_generations(output: str, value_to_return):&#10;    global card_number, pin, are_all_inputs_read&#10;    credentials = get_credentials(output)&#10;    another_card_number = credentials[0]&#10;&#10;    if another_card_number == card_number:&#10;        return CheckResult.wrong('Your program generates two identical card numbers!')&#10;    are_all_inputs_read = True&#10;&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_correct_credentials(output: str, value_to_return):&#10;    global card_number, pin&#10;    return '{}\n{}'.format(card_number, pin)&#10;&#10;&#10;def test_output_after_correct_sign_in(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'successfully' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'successfully\' in your output after signing in with correct credentials')&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_wrong_pin(output: str, value_to_return):&#10;    global card_number, pin&#10;    wrong_pin = pin&#10;    while pin == wrong_pin:&#10;        wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))&#10;    return '{}\n{}\n'.format(card_number, wrong_pin)&#10;&#10;&#10;def test_output_after_wrong_pin(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'wrong' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'wrong\' in your output after signing in with incorrect credentials')&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_wrong_card_number(output: str, value_to_return):&#10;    global card_number, pin&#10;    wrong_card_number = card_number&#10;    while wrong_card_number == card_number:&#10;        temp = [4, 0, 0, 0, 0, 0]&#10;        for _ in range(10):&#10;            temp.append(random.randint(1, 9))&#10;        wrong_card_number = ''.join(list(map(str, temp)))&#10;    return '{}\n{}\n'.format(wrong_card_number, pin)&#10;&#10;&#10;def test_output_after_wrong_card_number(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'wrong' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'wrong\' in your output after signing in with incorrect credentials')&#10;    return value_to_return&#10;&#10;&#10;class BankingSystem(StageTest):&#10;&#10;    def generate(self):&#10;        return [&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '1'),&#10;                    lambda output: test_difference_between_generations(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_correct_credentials(output, None),&#10;                    lambda output: test_output_after_correct_sign_in(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_wrong_pin(output, None),&#10;                    lambda output: test_output_after_wrong_pin(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_wrong_card_number(output, None),&#10;                    lambda output: test_output_after_wrong_card_number(output, '0')&#10;                ]),&#10;        ]&#10;&#10;    def check(self, reply: str, attach) -&gt; CheckResult:&#10;        global are_all_inputs_read&#10;        if are_all_inputs_read:&#10;            return CheckResult.correct()&#10;        else:&#10;            return CheckResult.wrong('You didn\'t read all inputs!')&#10;&#10;&#10;if __name__ == '__main__':&#10;    BankingSystem('banking.banking').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="banking/banking.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="banking/banking.py" />
                                <option name="text" value="# Write your code here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description    &lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, we will find out what the purpose of the checksum is and what the Luhn algorithm is used for.&lt;/p&gt;&#10;&#10;&lt;p&gt;The main purpose of the check digit is to verify that the card number is valid. Say you're buying something online, and you type in your credit card number incorrectly by accidentally swapping two digits, which is one of the most common errors. When the website looks at the number you've entered and applies the Luhn algorithm to the first 15 digits, the result won't match the 16th digit on the number you entered. The computer knows the number is invalid, and it knows the number will be rejected if it tries to submit the purchase for approval, so you're asked to re-enter the number. Another purpose of the check digit is to catch clumsy attempts to create fake credit card numbers. Those who are familiar with the Luhn algorithm, however, could get past this particular security measure.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Luhn Algorithm in action&lt;/h2&gt;&#10;&#10;&lt;p&gt;The Luhn algorithm is used to validate a credit card number or other identifying numbers, such as Social Security. The Luhn algorithm, also called the Luhn formula or modulus 10, checks the sum of the digits in the card number and checks whether the sum matches the expected result or if there is an error in the number sequence. After working through the algorithm, if the total modulus 10 equals zero, then the number is valid according to the Luhn method.&lt;/p&gt;&#10;&#10;&lt;p&gt;While the algorithm can be used to verify other identification numbers, it is usually associated with credit card verification. The algorithm works for all major credit cards.&lt;/p&gt;&#10;&#10;&lt;p&gt;Here is how it works for a credit card with the number 4000008449433403:&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;127&quot; src=&quot;https://lh5.googleusercontent.com/g0VqKN-lj0Z-5px2jCzIKl8Bc129YZ7fFhvhKn_R3davOm1WPShgHQllYxNhzXdQvw2NUpIWZLpcJ57R0ZsYLK1O9ZW1nLF0F0DZNcWUUfMbozVE2HI9iV1ajbgmBRO3dD0aI_qW&quot; width=&quot;602&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;If the received number is divisible by 10 with the remainder equal to zero, then this number is valid; otherwise, the card number is not valid. When registering in your banking system, you should generate cards with numbers that are checked by the Luhn algorithm. You know how to check the card for validity. But how do you generate a card number so that it passes the validation test? It's very simple!&lt;/p&gt;&#10;&#10;&lt;p&gt;First, we need to generate an Account Identifier, which is unique to each card. Then we need to assign the Account Identifier to our BIN (Bank Identification Number). As a result, we get a 15-digit number 400000844943340, so we only have to generate the last digit, which is a checksum. &lt;/p&gt;&#10;&#10;&lt;p&gt;To find the checksum, it is necessary to find the control number for 400000844943340 by the Luhn algorithm. It equals 57 (from the example above). The final check digit of the generated map is &lt;code class=&quot;java&quot;&gt;57+X&lt;/code&gt;, where &lt;code class=&quot;java&quot;&gt;X&lt;/code&gt; is checksum. In order for the final card number to pass the validity check, the check number must be a multiple of 10, so &lt;code class=&quot;java&quot;&gt;57+X&lt;/code&gt; must be a multiple of 10. The only number that satisfies this condition is 3. &lt;/p&gt;&#10;&#10;&lt;p&gt;Therefore, the checksum is 3. So the total number of the generated card is 4000008449433403. The received card is checked by the Luhn algorithm.&lt;/p&gt;&#10;&#10;&lt;p&gt;You need to change the credit card generation algorithm so that they pass the Luhn algorithm.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Instruction&lt;/h2&gt;&#10;&#10;&lt;p&gt;You should allow customers to create a new account in our banking system.&lt;/p&gt;&#10;&#10;&lt;p&gt;Once the program starts you should print the menu: &lt;/p&gt;&#10;&#10;&lt;p&gt;1. Create an account&lt;br&gt;&#10;2. Log into account&lt;br&gt;&#10;0. Exit&lt;/p&gt;&#10;&#10;&lt;p&gt;If the customer chooses ‘Create an account’, you should generate a new card number that satisfies all the conditions described above. Then you should generate a PIN code that belongs to the generated card number. PIN  is a sequence of 4 digits; it should be generated in the range from 0000 to 9999.&lt;/p&gt;&#10;&#10;&lt;p&gt;If the customer chooses ‘Log into account’, you should ask to enter card information.&lt;/p&gt;&#10;&#10;&lt;p&gt;After the information has been entered correctly, you should allow the user to check the account balance; after creating the account, the balance should be 0. It should also be possible to log out of the account and exit the program.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;The symbol &lt;code class=&quot;java&quot;&gt;&amp;gt;&lt;/code&gt; represents the user input. Notice that it's not a part of the input.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Your card has been created&#10;Your card number:&#10;4000004938320896&#10;Your card PIN:&#10;6826&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;2&#10;&#10;Enter your card number:&#10;&amp;gt;4000004938320896&#10;Enter your PIN:&#10;&amp;gt;4444&#10;&#10;Wrong card number or PIN!&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;2&#10;&#10;Enter your card number:&#10;&amp;gt;4000004938320896&#10;Enter your PIN:&#10;&amp;gt;6826&#10;&#10;You have successfully logged in!&#10;&#10;1. Balance&#10;2. Log out&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Balance: 0&#10;&#10;1. Balance&#10;2. Log out&#10;0. Exit&#10;&amp;gt;2&#10;&#10;You have successfully logged out!&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;0&#10;&#10;Bye!&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/109/stages/592/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9828" />
                      <option name="index" value="2" />
                      <option name="name" value="Luhn algorithm" />
                      <option name="record" value="2" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="banking/banking.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="banking/banking.py" />
                                <option name="text" value="from random import randint&#10;&#10;&#10;# Write your code here&#10;class Account:&#10;    balance = 0&#10;    log_in = False&#10;&#10;    def __init__(self, card_number, pin):&#10;        self.card_number = card_number&#10;        self.pin = pin&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.card_number}: {self.pin}&quot;&#10;&#10;    def check_number_password(self, card_number, pin):&#10;        if card_number == self.card_number and pin == self.pin:&#10;            return True&#10;        else:&#10;            return False&#10;&#10;    def account_operation(self, operation):&#10;        self.log_in = operation&#10;&#10;&#10;account = Account(&quot;0&quot;, &quot;0&quot;)&#10;&#10;&#10;def print_not_logged():&#10;    print()&#10;    print(&quot;1. Create an account&quot;)&#10;    print(&quot;2. Log into account&quot;)&#10;    print(&quot;0. Exit&quot;)&#10;&#10;&#10;def create_an_account():&#10;    print()&#10;    iin = &quot;400000&quot;&#10;    account_number = randint(1000000000, 9999999999)&#10;    iin_number = iin + str(account_number)&#10;    pin_number = randint(00000, 9999)&#10;    print(&quot;Your card has been created&quot;)&#10;    print(&quot;Your card number:&quot;)&#10;    print(iin_number)&#10;    print(&quot;Your card PIN:&quot;)&#10;    print(pin_number)&#10;    global account&#10;    account = Account(iin_number, pin_number)&#10;&#10;&#10;def log_in_account():&#10;    print()&#10;    number = input(&quot;Enter your card number:\n&quot;)&#10;    pin = int(input(&quot;Enter your PIN:\n&quot;).strip())&#10;    global account&#10;    print()&#10;    if account.check_number_password(number, pin):&#10;        print(&quot;You successfully logged in!&quot;)&#10;        account.account_operation(True)&#10;        return account_operation()&#10;    else:&#10;        print(&quot;Wrong card number or PIN!&quot;)&#10;&#10;&#10;def account_operation():&#10;    while True:&#10;        print()&#10;        print(&quot;1. Balance&quot;)&#10;        print(&quot;2. Log out&quot;)&#10;        print(&quot;0. Exit&quot;)&#10;        inp = input()&#10;        print()&#10;        if inp == &quot;1&quot;:&#10;            print(f&quot;Balance: {account.balance}&quot;)&#10;        elif inp == &quot;2&quot;:&#10;            account.account_operation(False)&#10;            print(&quot;You have successfully logged out!&quot;)&#10;            return inp&#10;        else:&#10;            return inp&#10;&#10;&#10;def bye():&#10;    print()&#10;    print(&quot;Bye!&quot;)&#10;&#10;&#10;def main():&#10;    while True:&#10;        print_not_logged()&#10;        choose = input()&#10;        if choose == '1':&#10;            create_an_account()&#10;        elif choose == '2':&#10;            status = log_in_account()&#10;            if status == &quot;0&quot;:&#10;                bye()&#10;                return&#10;        elif choose == '0':&#10;            bye()&#10;            return&#10;&#10;&#10;main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.exceptions import WrongAnswerException&#10;from hstest.test_case import CheckResult&#10;from hstest.stage_test import StageTest&#10;from hstest.test_case import TestCase&#10;import random&#10;import re&#10;&#10;card_number = ''&#10;pin = ''&#10;are_all_inputs_read = False&#10;&#10;&#10;def get_credentials(output: str):&#10;    number = re.findall(r'400000\d{10}', output, re.MULTILINE)&#10;    if not number:&#10;        raise WrongAnswerException('You are printing the card number incorrectly. '&#10;                                   'The card number should look like in the example: 400000DDDDDDDDDD,'&#10;                                   ' where D is a digit.\nMake sure the card number is 16-digit length and '&#10;                                   'you don\'t print any extra spaces at the end of the line!')&#10;&#10;    PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)&#10;    if not PIN:&#10;        raise WrongAnswerException('You are printing the card PIN incorrectly. '&#10;                                   'The PIN should look like in the example: DDDD, where D is a digit.\n'&#10;                                   'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'&#10;                                   ' end of the line!')&#10;&#10;    return number[0], PIN[0]&#10;&#10;&#10;def test_card_generation(output: str, value_to_return):&#10;    global card_number, pin, are_all_inputs_read&#10;    are_all_inputs_read = False&#10;    credentials = get_credentials(output)&#10;    card_number = credentials[0]&#10;    pin = credentials[1]&#10;    return value_to_return&#10;&#10;&#10;def test_difference_between_generations(output: str, value_to_return):&#10;    global card_number, pin, are_all_inputs_read&#10;    credentials = get_credentials(output)&#10;    another_card_number = credentials[0]&#10;&#10;    if another_card_number == card_number:&#10;        return CheckResult.wrong('Your program generates two identical card numbers!')&#10;    are_all_inputs_read = True&#10;&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_correct_credentials(output: str, value_to_return):&#10;    global card_number, pin&#10;    return '{}\n{}'.format(card_number, pin)&#10;&#10;&#10;def test_output_after_correct_sign_in(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'successfully' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'successfully\' in your output after signing in with correct credentials')&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_wrong_pin(output: str, value_to_return):&#10;    global card_number, pin&#10;    wrong_pin = pin&#10;    while pin == wrong_pin:&#10;        wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))&#10;    return '{}\n{}\n'.format(card_number, wrong_pin)&#10;&#10;&#10;def test_output_after_wrong_pin(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'wrong' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'wrong\' in your output after signing in with incorrect credentials')&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_wrong_card_number(output: str, value_to_return):&#10;    global card_number, pin&#10;    wrong_card_number = card_number&#10;    while wrong_card_number == card_number:&#10;        temp = [4, 0, 0, 0, 0, 0]&#10;        for _ in range(10):&#10;            temp.append(random.randint(1, 9))&#10;        wrong_card_number = ''.join(list(map(str, temp)))&#10;    return '{}\n{}\n'.format(wrong_card_number, pin)&#10;&#10;&#10;def test_output_after_wrong_card_number(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'wrong' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'wrong\' in your output after signing in with incorrect credentials')&#10;    return value_to_return&#10;&#10;&#10;def is_passed_luhn_algorithm(number):&#10;    luhn = [int(char) for char in str(number)]&#10;    for i, num in enumerate(luhn):&#10;        if (i + 1) % 2 == 0:&#10;            continue&#10;        temp = num * 2&#10;        luhn[i] = temp if temp &lt; 10 else temp - 9&#10;    return sum(luhn) % 10 == 0&#10;&#10;&#10;def test_luhn_algorithm(output: str, correct_num_of_cards):&#10;    global are_all_inputs_read&#10;&#10;    numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)&#10;&#10;    for number in numbers:&#10;        if len(number) != 16:&#10;            return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')&#10;        if not is_passed_luhn_algorithm(number):&#10;            return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))&#10;&#10;    if len(numbers) != correct_num_of_cards:&#10;        return CheckResult.wrong(&#10;            f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'&#10;            f'The card number should be 16-digit length and should start with 400000.')&#10;&#10;    are_all_inputs_read = True&#10;    return '0'&#10;&#10;&#10;class BankingSystem(StageTest):&#10;&#10;    def generate(self):&#10;        return [&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '1'),&#10;                    lambda output: test_difference_between_generations(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_correct_credentials(output, None),&#10;                    lambda output: test_output_after_correct_sign_in(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_wrong_pin(output, None),&#10;                    lambda output: test_output_after_wrong_pin(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_wrong_card_number(output, None),&#10;                    lambda output: test_output_after_wrong_card_number(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1',&#10;                    lambda output: test_luhn_algorithm(output, 11),&#10;                ])&#10;        ]&#10;&#10;    def check(self, reply: str, attach) -&gt; CheckResult:&#10;        if are_all_inputs_read:&#10;            return CheckResult.correct()&#10;        else:&#10;            return CheckResult.wrong('You didn\'t read all inputs!')&#10;&#10;&#10;if __name__ == '__main__':&#10;    BankingSystem('banking.banking').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt; Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;It's very upsetting when the data about registered users disappears after the program is completed. To avoid this problem, you need to create a database where you will store all the necessary information about the created credit cards. We will use SQLite to create the database.&lt;/p&gt;&#10;&#10;&lt;p&gt;SQLite is a database engine. It is software that allows users to interact with a relational database. In SQLite, a database is stored in a single file — a trait that distinguishes it from other database engines. This allows for greater accessibility: copying a database is no more complicated than copying the file that stores the data, and sharing a database implies just sending an email attachment.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can use &lt;code class=&quot;language-java&quot;&gt;sqlite3&lt;/code&gt; module to manage SQLite database from python. You don't need to install this module. It is included in the standard library.&lt;/p&gt;&#10;&#10;&lt;p&gt;To use the module, you must first create a &lt;code class=&quot;language-java&quot;&gt;Connection&lt;/code&gt; object that represents the database. Here the data will be stored in the &lt;code class=&quot;language-java&quot;&gt;example.s3db&lt;/code&gt; file:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import sqlite3&#10;conn = sqlite3.connect('example.s3db')&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Once you have a &lt;code class=&quot;language-java&quot;&gt;Connection&lt;/code&gt;, you can create a &lt;code class=&quot;language-java&quot;&gt;Cursor&lt;/code&gt; object and call its &lt;code class=&quot;language-java&quot;&gt;execute()&lt;/code&gt; method to perform SQL queries:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;cur = conn.cursor()&#10;&#10;# Executes some SQL query&#10;cur.execute('SOME SQL QUERY')&#10;&#10;# After doing some changes in DB don't forget to commit them!&#10;conn.commit()&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;To get data returned by SELECT query you can user &lt;code class=&quot;language-java&quot;&gt;fetchone()&lt;/code&gt;, &lt;code class=&quot;language-java&quot;&gt;fetchall()&lt;/code&gt; methods:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;cur.execute('SOME SELECT QUERY')&#10;&#10;# Returns the first row from the response&#10;cur.fetchone()&#10;&#10;# Returns all rows from the response&#10;cur.fetchall()&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Instruction&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, create a database named &lt;code class=&quot;language-java&quot;&gt;card.s3db&lt;/code&gt; with a table titled &lt;strong&gt;card&lt;/strong&gt;. It should have the following columns:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;id INTEGER&lt;/li&gt;&#10;&#9;&lt;li&gt;number TEXT&lt;/li&gt;&#10;&#9;&lt;li&gt;pin TEXT&lt;/li&gt;&#10;&#9;&lt;li&gt;balance INTEGER DEFAULT 0&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;Pay attention: your database file should be created when the program starts, if it hasn’t yet been created. And all created cards should be stored in the database from now.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-primary&quot;&gt;Do not forget to commit your DB changes right after executing a query!&lt;/div&gt;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;The symbol &lt;code class=&quot;language-java&quot;&gt;&amp;gt;&lt;/code&gt; represents the user input. Notice that it's not a part of the input.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Your card has been created&#10;Your card number:&#10;4000003429795087&#10;Your card PIN:&#10;6826&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;2&#10;&#10;Enter your card number:&#10;&amp;gt;4000003429795087&#10;Enter your PIN:&#10;&amp;gt;4444&#10;&#10;Wrong card number or PIN!&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;2&#10;&#10;Enter your card number:&#10;&amp;gt;4000003429795087&#10;Enter your PIN:&#10;&amp;gt;6826&#10;&#10;You have successfully logged in!&#10;&#10;1. Balance&#10;2. Log out&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Balance: 0&#10;&#10;1. Balance&#10;2. Log out&#10;0. Exit&#10;&amp;gt;2&#10;&#10;You have successfully logged out!&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;0&#10;&#10;Bye!&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/109/stages/593/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9829" />
                      <option name="index" value="3" />
                      <option name="name" value="I'm so lite" />
                      <option name="record" value="3" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="banking/banking.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="banking/banking.py" />
                                <option name="text" value="from random import randint&#10;&#10;&#10;# Write your code here&#10;class Account:&#10;    balance = 0&#10;    log_in = False&#10;&#10;    def __init__(self, card_number, pin):&#10;        self.card_number = card_number&#10;        self.pin = pin&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.card_number}: {self.pin}&quot;&#10;&#10;    def check_number_password(self, card_number, pin):&#10;        if card_number == self.card_number and pin == self.pin:&#10;            return True&#10;        else:&#10;            return False&#10;&#10;    def account_operation(self, operation):&#10;        self.log_in = operation&#10;&#10;&#10;account = Account(&quot;0&quot;, &quot;0&quot;)&#10;&#10;&#10;def print_not_logged():&#10;    print()&#10;    print(&quot;1. Create an account&quot;)&#10;    print(&quot;2. Log into account&quot;)&#10;    print(&quot;0. Exit&quot;)&#10;&#10;&#10;def create_an_account():&#10;    print()&#10;    iin = &quot;400000&quot;&#10;    account_number = randint(100000000, 999999999)&#10;    iin_number = iin + str(account_number)&#10;    iin_array = [int(x) for x in iin_number]&#10;    cheksum = calc_checksum(iin_array)&#10;    iin_number += cheksum&#10;    pin_number = randint(0000, 9999)&#10;    print(&quot;Your card has been created&quot;)&#10;    print(&quot;Your card number:&quot;)&#10;    print(iin_number)&#10;    print(&quot;Your card PIN:&quot;)&#10;    print(pin_number)&#10;    global account&#10;    account = Account(iin_number, pin_number)&#10;&#10;&#10;def calc_checksum(number):&#10;    checksum = 0&#10;    i = 1&#10;    for digit in number:&#10;        checksum += (int(digit) * 2 if int(digit) * 2 &lt; 10 else int(digit) * 2 - 9) if i % 2 else int(digit)&#10;        i += 1&#10;    return str(10 - checksum % 10)[-1]&#10;&#10;&#10;def log_in_account():&#10;    print()&#10;    number = input(&quot;Enter your card number:\n&quot;)&#10;    pin = int(input(&quot;Enter your PIN:\n&quot;).strip())&#10;    global account&#10;    print()&#10;    if account.check_number_password(number, pin):&#10;        print(&quot;You successfully logged in!&quot;)&#10;        account.account_operation(True)&#10;        return account_operation()&#10;    else:&#10;        print(&quot;Wrong card number or PIN!&quot;)&#10;&#10;&#10;def account_operation():&#10;    while True:&#10;        print()&#10;        print(&quot;1. Balance&quot;)&#10;        print(&quot;2. Log out&quot;)&#10;        print(&quot;0. Exit&quot;)&#10;        inp = input()&#10;        print()&#10;        if inp == &quot;1&quot;:&#10;            print(f&quot;Balance: {account.balance}&quot;)&#10;        elif inp == &quot;2&quot;:&#10;            account.account_operation(False)&#10;            print(&quot;You have successfully logged out!&quot;)&#10;            return inp&#10;        else:&#10;            return inp&#10;&#10;&#10;def bye():&#10;    print()&#10;    print(&quot;Bye!&quot;)&#10;&#10;&#10;def main():&#10;    while True:&#10;        print_not_logged()&#10;        choose = input()&#10;        if choose == '1':&#10;            create_an_account()&#10;        elif choose == '2':&#10;            status = log_in_account()&#10;            if status == &quot;0&quot;:&#10;                bye()&#10;                return&#10;        elif choose == '0':&#10;            bye()&#10;            return&#10;&#10;&#10;main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.exceptions import WrongAnswerException&#10;from hstest.test_case import CheckResult&#10;from hstest.stage_test import StageTest&#10;from hstest.test_case import TestCase&#10;from shutil import copy2&#10;import os&#10;import sqlite3&#10;import random&#10;import re&#10;&#10;card_number = ''&#10;pin = ''&#10;are_all_inputs_read = False&#10;db_file_name = 'card.s3db'&#10;temp_db_file_name = 'temp.s3db'&#10;&#10;&#10;def get_credentials(output: str):&#10;    number = re.findall(r'400000\d{10}', output, re.MULTILINE)&#10;    if not number:&#10;        raise WrongAnswerException('You are printing the card number incorrectly. '&#10;                                   'The card number should look like in the example: 400000DDDDDDDDDD,'&#10;                                   ' where D is a digit.\nMake sure the card number is 16-digit length and '&#10;                                   'you don\'t print any extra spaces at the end of the line!')&#10;&#10;    PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)&#10;    if not PIN:&#10;        raise WrongAnswerException('You are printing the card PIN incorrectly. '&#10;                                   'The PIN should look like in the example: DDDD, where D is a digit.\n'&#10;                                   'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'&#10;                                   ' end of the line!')&#10;&#10;    return number[0], PIN[0]&#10;&#10;&#10;def test_card_generation(output: str, value_to_return):&#10;    global card_number, pin, are_all_inputs_read&#10;    are_all_inputs_read = False&#10;    credentials = get_credentials(output)&#10;    card_number = credentials[0]&#10;    pin = credentials[1]&#10;    return value_to_return&#10;&#10;&#10;def test_difference_between_generations(output: str, value_to_return):&#10;    global card_number, pin, are_all_inputs_read&#10;    credentials = get_credentials(output)&#10;    another_card_number = credentials[0]&#10;&#10;    if another_card_number == card_number:&#10;        return CheckResult.wrong('Your program generates two identical card numbers!')&#10;    are_all_inputs_read = True&#10;&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_correct_credentials(output: str, value_to_return):&#10;    global card_number, pin&#10;    return '{}\n{}'.format(card_number, pin)&#10;&#10;&#10;def test_output_after_correct_sign_in(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'successfully' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'successfully\' in your output after signing in with correct credentials')&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_wrong_pin(output: str, value_to_return):&#10;    global card_number, pin&#10;    wrong_pin = pin&#10;    while pin == wrong_pin:&#10;        wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))&#10;    return '{}\n{}\n'.format(card_number, wrong_pin)&#10;&#10;&#10;def test_output_after_wrong_pin(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'wrong' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'wrong\' in your output after signing in with incorrect credentials')&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_wrong_card_number(output: str, value_to_return):&#10;    global card_number, pin&#10;    wrong_card_number = card_number&#10;    while wrong_card_number == card_number:&#10;        temp = [4, 0, 0, 0, 0, 0]&#10;        for _ in range(10):&#10;            temp.append(random.randint(1, 9))&#10;        wrong_card_number = ''.join(list(map(str, temp)))&#10;    return '{}\n{}\n'.format(wrong_card_number, pin)&#10;&#10;&#10;def test_output_after_wrong_card_number(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'wrong' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'wrong\' in your output after signing in with incorrect credentials')&#10;    return value_to_return&#10;&#10;&#10;def is_passed_luhn_algorithm(number):&#10;    luhn = [int(char) for char in str(number)]&#10;    for i, num in enumerate(luhn):&#10;        if (i + 1) % 2 == 0:&#10;            continue&#10;        temp = num * 2&#10;        luhn[i] = temp if temp &lt; 10 else temp - 9&#10;    return sum(luhn) % 10 == 0&#10;&#10;&#10;def test_luhn_algorithm(output: str, correct_num_of_cards):&#10;    global are_all_inputs_read&#10;&#10;    numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)&#10;&#10;    for number in numbers:&#10;        if len(number) != 16:&#10;            return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')&#10;        if not is_passed_luhn_algorithm(number):&#10;            return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))&#10;&#10;    if len(numbers) != correct_num_of_cards:&#10;        return CheckResult.wrong(&#10;            f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'&#10;            f'The card number should be 16-digit length and should start with 400000.')&#10;&#10;    are_all_inputs_read = True&#10;    return '0'&#10;&#10;&#10;def check_db(output: str, value_to_return):&#10;    if not os.path.exists(db_file_name):&#10;        return CheckResult.wrong('Can\'t find db file named \'{}\''.format(db_file_name))&#10;    try:&#10;        copy2(db_file_name, temp_db_file_name)&#10;    except Exception:&#10;        return CheckResult.wrong('Can\'t copy database file!')&#10;&#10;    try:&#10;        with sqlite3.connect(db_file_name) as db:&#10;            response = db.execute(&#10;                'SELECT name FROM sqlite_master WHERE type = \'table\' AND name NOT LIKE \'sqlite_%\';')&#10;            for _ in response.fetchall():&#10;                if 'card' in _:&#10;                    break&#10;            else:&#10;                return CheckResult.wrong('Your database doesn\'t have a table named \'card\'')&#10;    except Exception as exp:&#10;        return CheckResult.wrong('Can\'t connect to the database!')&#10;&#10;    correct_columns = (('ID', 'INTEGER'), ('NUMBER', 'TEXT'), ('PIN', 'TEXT'), ('BALANCE', 'INTEGER'))&#10;&#10;    try:&#10;        with sqlite3.connect(db_file_name) as db:&#10;            response = db.execute('PRAGMA table_info(card);')&#10;            real_columns = response.fetchall()&#10;            for correct_column in correct_columns:&#10;                for real_column in real_columns:&#10;                    real_column = [str(element).upper() for element in real_column]&#10;                    if correct_column[0] in real_column and correct_column[1] in real_column:&#10;                        break&#10;                else:&#10;                    return CheckResult.wrong(&#10;                        f'Can\'t find column named \'{correct_column[0].lower()}\' with \'{correct_column[1]}\' type.\n'&#10;                        'Your table should have columns described in the stage instructions.')&#10;    except Exception as ignored:&#10;        return CheckResult.wrong('Can\'t connect to the database!')&#10;&#10;    return CheckResult.correct()&#10;&#10;&#10;def check_db_rows(output, attach):&#10;    correct_num_of_cards = 10&#10;    numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)&#10;&#10;    for number in numbers:&#10;        if len(number) != 16:&#10;            return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')&#10;        if not is_passed_luhn_algorithm(number):&#10;            return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))&#10;&#10;    if len(numbers) != correct_num_of_cards:&#10;        return CheckResult.wrong(&#10;            f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'&#10;            f'The card number should be 16-digit length and should start with 400000.')&#10;&#10;    with sqlite3.connect(db_file_name) as db:&#10;        rows = db.execute('SELECT * FROM card').fetchall()&#10;        for number in numbers:&#10;            if len(number) != 16:&#10;                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')&#10;            for row in rows:&#10;                if number in row:&#10;                    break&#10;            else:&#10;                return CheckResult.wrong('Your database doesn’t save newly created cards.\n'&#10;                                         'Make sure you commit your DB changes right after saving a new card in the database!')&#10;    return CheckResult.correct()&#10;&#10;&#10;class BankingSystem(StageTest):&#10;&#10;    def generate(self):&#10;        return [&#10;            TestCase(&#10;                stdin='0',&#10;                check_function=check_db,&#10;            ),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '1'),&#10;                    lambda output: test_difference_between_generations(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1\n1\n1\n1\n1\n1\n1\n1',&#10;                    lambda output: test_luhn_algorithm(output, 8),&#10;                ]),&#10;            TestCase(&#10;                stdin='1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0',&#10;                check_function=check_db_rows&#10;            ),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_correct_credentials(output, None),&#10;                    lambda output: test_output_after_correct_sign_in(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_wrong_pin(output, None),&#10;                    lambda output: test_output_after_wrong_pin(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_wrong_card_number(output, None),&#10;                    lambda output: test_output_after_wrong_card_number(output, '0')&#10;                ])&#10;        ]&#10;&#10;    def check(self, reply: str, attach) -&gt; CheckResult:&#10;        if are_all_inputs_read:&#10;            return CheckResult.correct()&#10;        else:&#10;            return CheckResult.wrong('You didn\'t read all inputs!')&#10;&#10;    def after_all_tests(self):&#10;        if os.path.exists('temp.s3db'):&#10;            copy2('temp.s3db', 'card.s3db')&#10;            os.remove('temp.s3db')&#10;&#10;&#10;if __name__ == '__main__':&#10;    BankingSystem('banking.banking').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;You have created the foundation of our banking system. Now let's take the opportunity to deposit money into an account, make transfers and close an account if necessary.&lt;/p&gt;&#10;&#10;&lt;p&gt;Now your menu should look like this:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. Balance&#10;2. Add income&#10;3. Do transfer&#10;4. Close account&#10;5. Log out&#10;0. Exit&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;If the user asks for &lt;code class=&quot;java&quot;&gt;Balance&lt;/code&gt;, you should read the balance of the account from the database and output it into the console.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;code class=&quot;java&quot;&gt;Add income&lt;/code&gt; item should allow us to deposit money to the account.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;code class=&quot;java&quot;&gt;Do transfer&lt;/code&gt; item should allow transferring money to another account. You should handle the following errors:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;If the user tries to transfer more money than he/she has, output: &quot;Not enough money!&quot;&lt;/li&gt;&#10;&#9;&lt;li&gt;If the user tries to transfer money to the same account, output the following message: “You can't transfer money to the same account!”&lt;/li&gt;&#10;&#9;&lt;li&gt;If the receiver's card number doesn’t pass the Luhn algorithm, you should output: “Probably you made mistake in the card number. Please try again!”&lt;/li&gt;&#10;&#9;&lt;li&gt;If the receiver's card number doesn’t exist, you should output: “Such a card does not exist.”&lt;/li&gt;&#10;&#9;&lt;li&gt;If there is no error, ask the user how much money they want to transfer and make the transaction.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;If the user chooses the &lt;code class=&quot;java&quot;&gt;Close account&lt;/code&gt; item, you should delete that account from the database.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-primary&quot;&gt;Do not forget to commit your DB changes right after executing a query!&lt;/div&gt;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Examples&lt;/h2&gt;&#10;&#10;&lt;p&gt;The symbol &lt;code class=&quot;java&quot;&gt;&amp;gt;&lt;/code&gt; represents the user input. Notice that it's not a part of the input.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Your card have been created&#10;Your card number:&#10;4000009455296122&#10;Your card PIN:&#10;1961&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Your card have been created&#10;Your card number:&#10;4000003305160034&#10;Your card PIN:&#10;5639&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;2&#10;&#10;Enter your card number:&#10;&amp;gt;4000009455296122&#10;Enter your PIN:&#10;&amp;gt;1961&#10;&#10;You have successfully logged in!&#10;&#10;1. Balance&#10;2. Add income&#10;3. Do transfer&#10;4. Close account&#10;5. Log out&#10;0. Exit&#10;&amp;gt;2&#10;&#10;Enter income:&#10;&amp;gt;10000&#10;Income was added!&#10;&#10;1. Balance&#10;2. Add income&#10;3. Do transfer&#10;4. Close account&#10;5. Log out&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Balance: 10000&#10;&#10;1. Balance&#10;2. Add income&#10;3. Do transfer&#10;4. Close account&#10;5. Log out&#10;0. Exit&#10;&amp;gt;3&#10;&#10;Transfer&#10;Enter card number:&#10;&amp;gt;4000003305160035&#10;Probably you made mistake in the card number. Please try again!&#10;&#10;1. Balance&#10;2. Add income&#10;3. Do transfer&#10;4. Close account&#10;5. Log out&#10;0. Exit&#10;&amp;gt;3&#10;&#10;Transfer&#10;Enter card number:&#10;&amp;gt;4000003305061034&#10;Such a card does not exist.&#10;&#10;1. Balance&#10;2. Add income&#10;3. Do transfer&#10;4. Close account&#10;5. Log out&#10;0. Exit&#10;&amp;gt;3&#10;&#10;Transfer&#10;Enter card number:&#10;&amp;gt;4000003305160034&#10;Enter how much money you want to transfer:&#10;&amp;gt;15000&#10;Not enough money!&#10;&#10;1. Balance&#10;2. Add income&#10;3. Do transfer&#10;4. Close account&#10;5. Log out&#10;0. Exit&#10;&amp;gt;3&#10;&#10;Transfer&#10;Enter card number:&#10;&amp;gt;4000003305160034&#10;Enter how much money you want to transfer:&#10;&amp;gt;5000&#10;Success!&#10;&#10;1. Balance&#10;2. Add income&#10;3. Do transfer&#10;4. Close account&#10;5. Log out&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Balance: 5000&#10;&#10;1. Balance&#10;2. Add income&#10;3. Do transfer&#10;4. Close account&#10;5. Log out&#10;0. Exit&#10;&#10;&amp;gt;0&#10;Bye!&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;1&#10;&#10;Your card has been created&#10;Your card number:&#10;4000007916053702&#10;Your card PIN:&#10;6263&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;2&#10;&#10;Enter your card number:&#10;&amp;gt;4000007916053702&#10;Enter your PIN:&#10;&amp;gt;6263&#10;&#10;You have successfully logged in!&#10;&#10;1. Balance&#10;2. Add income&#10;3. Do transfer&#10;4. Close account&#10;5. Log out&#10;0. Exit&#10;&amp;gt;4&#10;&#10;The account has been closed!&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;2&#10;&#10;Enter your card number:&#10;&amp;gt;4000007916053702&#10;Enter your PIN:&#10;&amp;gt;6263&#10;&#10;Wrong card number or PIN!&#10;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&amp;gt;0&#10;&#10;Bye!&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/109/stages/594/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9830" />
                      <option name="index" value="4" />
                      <option name="name" value="Advanced system" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="banking/banking.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="banking/banking.py" />
                                <option name="text" value="from random import randrange&#10;import luhn&#10;import sqlite3&#10;&#10;MAIN_PROMPT = &quot;&quot;&quot;&#10;1. Create an account&#10;2. Log into account&#10;0. Exit&#10;&quot;&quot;&quot;&#10;&#10;&#10;def create_db():&#10;    connection = sqlite3.connect('card.s3db')&#10;    cursor = connection.cursor()&#10;&#10;    cursor.execute('CREATE TABLE IF NOT EXISTS card (id INTEGER, number TEXT, pin TEXT, balance INTEGER DEFAULT 0)')&#10;&#10;    connection.commit()&#10;    connection.close()&#10;&#10;&#10;def save_card(card, pin):&#10;    connection = sqlite3.connect('card.s3db')&#10;    cursor = connection.cursor()&#10;&#10;    cursor.execute('INSERT INTO card(number, pin) VALUES(?, ?)', (card, pin))&#10;&#10;    connection.commit()&#10;    connection.close()&#10;&#10;&#10;def create_account():&#10;    IIN = 400000&#10;    account_identifier = randrange(100000000, 999999999)&#10;    pin = randrange(1111, 9999)&#10;    no_checksum = str(IIN) + str(account_identifier)&#10;    card_number = luhn.append(no_checksum)&#10;&#10;    print(f&quot;\nYour card has been created\nYour card number:\n{int(card_number)}&quot;)&#10;    print(f&quot;Your card PIN:\n{pin}&quot;)&#10;    save_card(card_number, pin)&#10;&#10;&#10;# TODO - TO BE MODIFIED DUE TO DATABASE CONVERSION&#10;def account_interface():&#10;    balance = 0&#10;    prompt_interface = input(&quot;1. Balance\n2. Log out\n0. Exit\n&quot;)&#10;&#10;    while prompt_interface != '0':&#10;        if prompt_interface == '1':&#10;            print(f&quot;\nBalance: {balance}\n&quot;)&#10;        elif prompt_interface == '2':&#10;            print(&quot;You have successfully logged out!&quot;)&#10;            break&#10;        prompt_interface = input(&quot;1. Balance\n2. Log out\n0. Exit\n&quot;)&#10;    else:&#10;        print(&quot;\nBye!&quot;)&#10;        exit()&#10;&#10;&#10;def check_stage2():&#10;    connection = sqlite3.connect('card.s3db')&#10;    cursor = connection.cursor()&#10;&#10;    cursor.execute('SELECT pin FROM card')&#10;    pin_check = cursor.fetchall()&#10;&#10;    prompt_pin = input(&quot;Enter your PIN:\n&quot;)&#10;&#10;    for number in pin_check:&#10;        if number[0] == prompt_pin:&#10;            print(&quot;\nYou have successfully logged in!\n&quot;)&#10;            account_interface()&#10;            break&#10;    else:&#10;        print(&quot;\nWrong card number or PIN!&quot;)&#10;&#10;    connection.commit()&#10;    connection.close()&#10;&#10;&#10;def check_stage1():&#10;    connection = sqlite3.connect('card.s3db')&#10;    cursor = connection.cursor()&#10;&#10;    cursor.execute('SELECT number FROM card')&#10;    card_check = cursor.fetchall()&#10;&#10;    connection.commit()&#10;&#10;    prompt_card_number = input(&quot;Enter your card number:\n&quot;)&#10;&#10;    for number in card_check:&#10;        if number[0] == prompt_card_number:&#10;            print(&quot;ok&quot;)&#10;            check_stage2()&#10;            break&#10;    else:&#10;        print(&quot;\nWrong card number or PIN!&quot;)&#10;&#10;    connection.close()&#10;&#10;&#10;def main():&#10;    create_db()&#10;    selection = input(MAIN_PROMPT)&#10;&#10;    while selection != '0':&#10;        if selection == '1':&#10;            create_account()&#10;        elif selection == '2':&#10;            check_stage1()&#10;        else:&#10;            pass&#10;        selection = input(MAIN_PROMPT)&#10;&#10;&#10;main()" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="from hstest.test_case import CheckResult&#10;from hstest.stage_test import StageTest, WrongAnswerException&#10;from hstest.test_case import TestCase&#10;from shutil import copy2&#10;import sqlite3&#10;import random&#10;import re&#10;import os&#10;&#10;card_number = ''&#10;pin = ''&#10;second_card_number = ''&#10;second_pin = ''&#10;are_all_inputs_read = False&#10;db_file_name = 'card.s3db'&#10;temp_db_file_name = 'temp.s3db'&#10;&#10;&#10;def get_credentials(output: str, count=0):&#10;    number = re.findall(r'400000\d{10}', output, re.MULTILINE)&#10;    if not number:&#10;        raise WrongAnswerException('You are printing the card number incorrectly. '&#10;                                   'The card number should look like in the example: 400000DDDDDDDDDD,'&#10;                                   ' where D is a digit.\nMake sure the card number is 16-digit length and '&#10;                                   'you don\'t print any extra spaces at the end of the line!')&#10;&#10;    PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)&#10;    if not PIN:&#10;        raise WrongAnswerException('You are printing the card PIN incorrectly. '&#10;                                   'The PIN should look like in the example: DDDD, where D is a digit.\n'&#10;                                   'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'&#10;                                   ' end of the line!')&#10;    if count == 2:&#10;        return (number[0], PIN[0]), (number[1], PIN[1])&#10;    else:&#10;        return number[0], PIN[0]&#10;&#10;&#10;def test_card_generation(output: str, value_to_return):&#10;    global card_number, pin, are_all_inputs_read&#10;    are_all_inputs_read = False&#10;    credentials = get_credentials(output)&#10;    card_number = credentials[0]&#10;    pin = credentials[1]&#10;    return value_to_return&#10;&#10;&#10;def test_difference_between_generations(output: str, value_to_return):&#10;    global card_number, pin, are_all_inputs_read&#10;    credentials = get_credentials(output)&#10;    another_card_number = credentials[0]&#10;&#10;    if another_card_number == card_number:&#10;        return CheckResult.wrong('Your program generates two identical card numbers!')&#10;    are_all_inputs_read = True&#10;&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_correct_credentials(output: str, value_to_return):&#10;    global card_number, pin&#10;    return '{}\n{}'.format(card_number, pin)&#10;&#10;&#10;def test_output_after_correct_sign_in(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'successfully' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'successfully\' in your output after signing in with correct credentials')&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_wrong_pin(output: str, value_to_return):&#10;    global card_number, pin&#10;    wrong_pin = pin&#10;    while pin == wrong_pin:&#10;        wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))&#10;    return '{}\n{}\n'.format(card_number, wrong_pin)&#10;&#10;&#10;def test_output_after_wrong_pin(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'wrong' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'wrong\' in your output after signing in with incorrect credentials')&#10;    return value_to_return&#10;&#10;&#10;def test_sign_in_with_wrong_card_number(output: str, value_to_return):&#10;    global card_number, pin&#10;    wrong_card_number = card_number&#10;    while wrong_card_number == card_number:&#10;        temp = [4, 0, 0, 0, 0, 0]&#10;        for _ in range(10):&#10;            temp.append(random.randint(1, 9))&#10;        wrong_card_number = ''.join(list(map(str, temp)))&#10;    return '{}\n{}\n'.format(wrong_card_number, pin)&#10;&#10;&#10;def test_output_after_wrong_card_number(output: str, value_to_return):&#10;    global are_all_inputs_read&#10;    are_all_inputs_read = True&#10;    if 'wrong' not in output.lower():&#10;        return CheckResult.wrong(&#10;            'There is no \'wrong\' in your output after signing in with incorrect credentials')&#10;    return value_to_return&#10;&#10;&#10;def is_passed_luhn_algorithm(number):&#10;    luhn = [int(char) for char in str(number)]&#10;    for i, num in enumerate(luhn):&#10;        if (i + 1) % 2 == 0:&#10;            continue&#10;        temp = num * 2&#10;        luhn[i] = temp if temp &lt; 10 else temp - 9&#10;    return sum(luhn) % 10 == 0&#10;&#10;&#10;def test_luhn_algorithm(output: str, correct_num_of_cards):&#10;    global are_all_inputs_read&#10;&#10;    numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)&#10;&#10;    for number in numbers:&#10;        if len(number) != 16:&#10;            return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')&#10;        if not is_passed_luhn_algorithm(number):&#10;            return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))&#10;&#10;    if len(numbers) != correct_num_of_cards:&#10;        return CheckResult.wrong(&#10;            f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'&#10;            f'The card number should be 16-digit length and should start with 400000.')&#10;&#10;    are_all_inputs_read = True&#10;    return '0'&#10;&#10;&#10;def check_db(output: str, value_to_return):&#10;    if not os.path.exists(db_file_name):&#10;        return CheckResult.wrong('Can\'t find db file named \'{}\''.format(db_file_name))&#10;    try:&#10;        copy2(db_file_name, temp_db_file_name)&#10;    except Exception:&#10;        return CheckResult.wrong('Can\'t copy database file!')&#10;&#10;    try:&#10;        with sqlite3.connect(db_file_name) as db:&#10;            response = db.execute(&#10;                'SELECT name FROM sqlite_master WHERE type = \'table\' AND name NOT LIKE \'sqlite_%\';')&#10;            for _ in response.fetchall():&#10;                if 'card' in _:&#10;                    break&#10;            else:&#10;                return CheckResult.wrong('Your database doesn\'t have a table named \'card\'')&#10;    except Exception as exp:&#10;        return CheckResult.wrong('Can\'t connect to the database!')&#10;&#10;    correct_columns = (('ID', 'INTEGER'), ('NUMBER', 'TEXT'), ('PIN', 'TEXT'), ('BALANCE', 'INTEGER'))&#10;&#10;    try:&#10;        with sqlite3.connect(db_file_name) as db:&#10;            response = db.execute('PRAGMA table_info(card);')&#10;            real_columns = response.fetchall()&#10;            for correct_column in correct_columns:&#10;                for real_column in real_columns:&#10;                    real_column = [str(element).upper() for element in real_column]&#10;                    if correct_column[0] in real_column and correct_column[1] in real_column:&#10;                        break&#10;                else:&#10;                    return CheckResult.wrong(&#10;                        f'Can\'t find column named \'{correct_column[0].lower()}\' with \'{correct_column[1]}\' type.\n'&#10;                        'Your table should have columns described in the stage instructions.')&#10;    except Exception:&#10;        return CheckResult.wrong('Can\'t connect to the database!')&#10;&#10;    return CheckResult.correct()&#10;&#10;&#10;def check_db_rows(output: str, value_to_return):&#10;    correct_num_of_cards = 10&#10;    numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)&#10;&#10;    for number in numbers:&#10;        if len(number) != 16:&#10;            return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')&#10;        if not is_passed_luhn_algorithm(number):&#10;            return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))&#10;&#10;    if len(numbers) != correct_num_of_cards:&#10;        return CheckResult.wrong(&#10;            f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'&#10;            f'The card number should be 16-digit length and should start with 400000.')&#10;&#10;    with sqlite3.connect(db_file_name) as db:&#10;        rows = db.execute('SELECT * FROM card').fetchall()&#10;        for number in numbers:&#10;            if len(number) != 16:&#10;                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')&#10;            is_found = False&#10;            for row in rows:&#10;                if number in row:&#10;                    is_found = True&#10;            if not is_found:&#10;                return CheckResult.wrong('Your database doesn’t save newly created cards.\n'&#10;                                         'Make sure you commit your DB changes right after saving a new card in the database!')&#10;    return CheckResult.correct()&#10;&#10;&#10;def test_add_income(output: str, value_to_return):&#10;    global card_number, pin, are_all_inputs_read&#10;    are_all_inputs_read = False&#10;    credentials = get_credentials(output)&#10;    card_number = credentials[0]&#10;    pin = credentials[1]&#10;    return '2\n{}\n{}\n2\n10000'.format(card_number, pin)&#10;&#10;&#10;def test_second_add_income(output: str, value_to_return):&#10;    global card_number&#10;    expected_balance = 10000&#10;    with sqlite3.connect(db_file_name) as db:&#10;        result = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()&#10;        if not result:&#10;            return CheckResult.wrong(f'Can\' find card number \'{card_number}\' in the database!\n'&#10;                                     f'Make sure you commit your DB changes right after saving a new card in the database!')&#10;        balance = result[3]&#10;        if balance != expected_balance:&#10;            return CheckResult.wrong(&#10;                'Account balance is wrong after adding income. Expected {}'.format(expected_balance))&#10;    return '2\n15000'&#10;&#10;&#10;def test_balance_after_second_income(output: str, value_to_return):&#10;    global card_number, are_all_inputs_read&#10;    expected_balance = 25000&#10;    with sqlite3.connect(db_file_name) as db:&#10;        result = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()&#10;        if not result:&#10;            return CheckResult.wrong(f'Can\' find card number \'{card_number}\' in the database!\n'&#10;                                     f'Make sure you commit your DB changes right after saving a new card in the database!')&#10;        balance = result[3]&#10;        if balance != expected_balance:&#10;            return CheckResult.wrong(&#10;                'Account balance is wrong after adding income. Expected {}'.format(expected_balance))&#10;    are_all_inputs_read = True&#10;    return value_to_return&#10;&#10;&#10;def test_transfer(output: str, value_to_return):&#10;    global card_number, pin, second_card_number, second_pin, are_all_inputs_read&#10;    are_all_inputs_read = False&#10;    credentials = get_credentials(output, count=2)&#10;    card_number, pin = credentials[0]&#10;    second_card_number, second_pin = credentials[1]&#10;    doesnt_pass_luhn = 4000003972196502&#10;    return '2\n{}\n{}\n3\n{}'.format(card_number, pin, doesnt_pass_luhn)&#10;&#10;&#10;def test_transfer_doesnt_pass_luhn(output: str, value_to_return):&#10;    if 'mistake'.lower() not in output.lower():&#10;        return CheckResult.wrong('You should not allow to transfer to a card number that doesn\'t pass '&#10;                                 'the Luhn algorithm.\n Instead output \'{}\''.format(&#10;            'Probably you made mistake in card number. Please try again!'))&#10;    doesnt_exist_card = 3000003972196503&#10;    return '3\n{}'.format(doesnt_exist_card)&#10;&#10;&#10;def test_transfer_doesnt_exist_card(output: str, value_to_return):&#10;    global second_card_number&#10;    if 'not exist' not in output.lower():&#10;        return CheckResult.wrong('You should not allow to transfer to a card number that does not exist.'&#10;                                 '\nYpu should print \'{}\''.format('Such a card does not exist.'))&#10;    return '3\n{}\n10000'.format(second_card_number)&#10;&#10;&#10;def test_transfer_not_enough_money(output: str, value_to_return):&#10;    global second_card_number&#10;    if 'not enough money' not in output.lower():&#10;        return CheckResult.wrong('You should not allow a transfer if there is not enough money '&#10;                                 'in the account to complete it.\n')&#10;    return '2\n20000\n3\n{}\n10000'.format(second_card_number)&#10;&#10;&#10;def test_balance_after_transfer(output: str, value_to_return):&#10;    global card_number, second_card_number, are_all_inputs_read&#10;    with sqlite3.connect(db_file_name) as db:&#10;        first = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()&#10;        if not first:&#10;            return CheckResult.wrong(f'Can\' find card number \'{first}\' in the database!\n'&#10;                                     f'Make sure you commit your DB changes right after saving a new card in the database!')&#10;        second = db.execute('SELECT * FROM card WHERE number = {}'.format(second_card_number)).fetchone()&#10;        if not second:&#10;            return CheckResult.wrong(f'Can\' find card number \'{second}\' in the database!\n'&#10;                                     f'Make sure you commit your DB changes right after saving a new card in the database!')&#10;        first_balance = first[3]&#10;        second_balance = second[3]&#10;        if first_balance != 10000:&#10;            return CheckResult.wrong('Incorrect account balance of the card used to make the transfer.')&#10;        if second_balance != 10000:&#10;            return CheckResult.wrong('Incorrect account balance of the card to which the transfer was made.')&#10;    are_all_inputs_read = True&#10;    return '0'&#10;&#10;&#10;def test_closing_account(output: str, value_to_return):&#10;    global card_number, pin, are_all_inputs_read&#10;    are_all_inputs_read = False&#10;    credentials = get_credentials(output)&#10;    card_number, pin = credentials[0], credentials[1]&#10;    return '2\n{}\n{}\n4'.format(card_number, pin)&#10;&#10;&#10;def test_rows_after_closing_account(output: str, value_to_return):&#10;    global card_number, are_all_inputs_read&#10;    with sqlite3.connect(db_file_name) as db:&#10;        rows = db.execute('SELECT * FROM card WHERE number = \'{}\''.format(card_number)).fetchall()&#10;        if rows:&#10;            return CheckResult.wrong('After closing an account, the card number should be deleted from the database.')&#10;    are_all_inputs_read = True&#10;    return value_to_return&#10;&#10;&#10;class BankingSystem(StageTest):&#10;&#10;    def generate(self):&#10;        return [&#10;            TestCase(&#10;                stdin='0',&#10;                check_function=check_db,&#10;            ),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '1'),&#10;                    lambda output: test_difference_between_generations(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1\n1\n1\n1\n1\n1\n1\n1',&#10;                    lambda output: test_luhn_algorithm(output, 8),&#10;                ]),&#10;            TestCase(&#10;                stdin='1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0',&#10;                check_function=check_db_rows&#10;            ),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_correct_credentials(output, None),&#10;                    lambda output: test_output_after_correct_sign_in(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_wrong_pin(output, None),&#10;                    lambda output: test_output_after_wrong_pin(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_card_generation(output, '2'),&#10;                    lambda output: test_sign_in_with_wrong_card_number(output, None),&#10;                    lambda output: test_output_after_wrong_card_number(output, '0')&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_add_income(output, None),&#10;                    lambda output: test_second_add_income(output, None),&#10;                    lambda output: test_balance_after_second_income(output, '0'),&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1\n1',&#10;                    lambda output: test_transfer(output, None),&#10;                    lambda output: test_transfer_doesnt_pass_luhn(output, None),&#10;                    lambda output: test_transfer_doesnt_exist_card(output, None),&#10;                    lambda output: test_transfer_not_enough_money(output, None),&#10;                    lambda output: test_balance_after_transfer(output, None),&#10;                ]),&#10;            TestCase(&#10;                stdin=[&#10;                    '1',&#10;                    lambda output: test_closing_account(output, None),&#10;                    lambda output: test_rows_after_closing_account(output, '0')&#10;                ]&#10;            )&#10;        ]&#10;&#10;    def check(self, reply: str, attach) -&gt; CheckResult:&#10;        if are_all_inputs_read:&#10;            return CheckResult.correct()&#10;        else:&#10;            return CheckResult.wrong('You didn\'t read all inputs!')&#10;&#10;    def after_all_tests(self):&#10;        if os.path.exists('temp.s3db'):&#10;            copy2('temp.s3db', 'card.s3db')&#10;            os.remove('temp.s3db')&#10;&#10;&#10;if __name__ == '__main__':&#10;    BankingSystem('banking.banking').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>